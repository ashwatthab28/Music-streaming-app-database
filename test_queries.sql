--- Search Queries on Sample database

-- TOP 5 TRENDING SONGS ON APP

 WE'RE CONSIDERING A TRENDING SONG AS THE MOST POPULAR(STREAMED)
 TRACK AMONG THOSE UPLOADED IN THE LAST TWO MONTHS.

SELECT TABLE1.SONG_ID, SONG.SONG_NAME, TABLE1.STREAMS_IN_INDIA
FROM (
  SELECT PLAYED_HISTORY.SONG_ID, COUNT(PLAYED_HISTORY.SONG_ID) AS STREAMS_IN_INDIA
  FROM PLAYED_HISTORY, SONG
  WHERE PLAYED_HISTORY.SONG_ID = SONG.SONG_ID
    AND SONG.DATE_OF_UPLOAD > ADD_MONTHS(SYSDATE, -2)
  GROUP BY PLAYED_HISTORY.SONG_ID
  ORDER BY STREAMS_IN_INDIA DESC
  FETCH FIRST 5 ROWS ONLY
) TABLE1,
SONG
WHERE SONG.SONG_ID = TABLE1.SONG_ID;



-- Identify the most popular subscription plans.

 SELECT TABLE1.SUBSCRIPTION_PLAN_ID, PLAN_TYPE, PLAN_DURATION, PLAN_AMOUNT, SUBSCRIPTIONS_SOLD
FROM SUBSCRIPTION_PLAN,
(
  SELECT SUBSCRIPTION_PLAN_ID, COUNT(SUBSCRIPTION_PLAN_ID) AS SUBSCRIPTIONS_SOLD
  FROM USER_SUBSCRIPTION_PLAN
  GROUP BY SUBSCRIPTION_PLAN_ID
  ORDER BY SUBSCRIPTIONS_SOLD DESC
) TABLE1
WHERE SUBSCRIPTION_PLAN.SUBSCRIPTION_PLAN_ID = TABLE1.SUBSCRIPTION_PLAN_ID;


-- DISPLAY CONTACT DETAILS OF USERS INACTIVE
 FOR THE PAST 3 MONTHS TO REQUEST FEEDBACK

SELECT USER_ID, MOB_NO
FROM CONTACT_DETAILS
WHERE USER_ID NOT IN (
  SELECT USER_ID
  FROM PLAYED_HISTORY
  WHERE DATE_AND_TIME >= ADD_MONTHS(SYSDATE, -3)
);



-- Show the distribution of app users by age group.

SELECT
  SUM(CASE WHEN USER_AGE BETWEEN 15 AND 20 THEN 1 ELSE 0 END) AS "15-20",
  SUM(CASE WHEN USER_AGE BETWEEN 21 AND 25 THEN 1 ELSE 0 END) AS "21-25",
  SUM(CASE WHEN USER_AGE BETWEEN 26 AND 30 THEN 1 ELSE 0 END) AS "26-30",
  SUM(CASE WHEN USER_AGE BETWEEN 31 AND 35 THEN 1 ELSE 0 END) AS "31-35",
  SUM(CASE WHEN USER_AGE BETWEEN 36 AND 40 THEN 1 ELSE 0 END) AS "36-40",
  SUM(CASE WHEN USER_AGE BETWEEN 41 AND 45 THEN 1 ELSE 0 END) AS "41-45",
  SUM(CASE WHEN USER_AGE > 45 THEN 1 ELSE 0 END) AS "45+"
FROM USER_DETAILS;


-- Show the most popular song by Arijit Singh.

 SELECT SONG.SONG_ID, SONG_NAME
FROM SONG,
(
  SELECT PLAYED_HISTORY.SONG_ID
  FROM PLAYED_HISTORY
  LEFT JOIN SONG ON SONG.SONG_ID = PLAYED_HISTORY.SONG_ID
  WHERE SINGER_ID = (SELECT ARTIST_ID FROM ARTIST WHERE ARTIST_NAME = 'ARIJIT SINGH')
  GROUP BY PLAYED_HISTORY.SONG_ID
  ORDER BY COUNT(PLAYED_HISTORY.SONG_ID) DESC
  FETCH FIRST 1 ROWS ONLY
) TABLE1
WHERE SONG.SONG_ID = TABLE1.SONG_ID;


 -- Show the active user subscriptions.

SELECT USER_SUBSCRIPTION_PLAN.USER_ID, USER_SUBSCRIPTION_PLAN.SUBSCRIPTION_PLAN_ID, USER_SUBSCRIPTION_PLAN.START_DATE, DURATION.END_DATE
FROM USER_SUBSCRIPTION_PLAN, DURATION
WHERE USER_SUBSCRIPTION_PLAN.SUBSCRIPTION_PLAN_ID = DURATION.SUBSCRIPTION_PLAN_ID
  AND USER_SUBSCRIPTION_PLAN.START_DATE = DURATION.START_DATE
  AND END_DATE >= SYSDATE;



-- TOP 5 POPULAR SONGS IN INDIA'

 SELECT TABLE1.SONG_ID, SONG.SONG_NAME, TABLE1.STREAMS_IN_INDIA
FROM (
  SELECT SONG_ID, COUNT(SONG_ID) AS STREAMS_IN_INDIA
  FROM PLAYED_HISTORY, USER_DETAILS
  WHERE PLAYED_HISTORY.USER_ID = USER_DETAILS.USER_ID
    AND USER_DETAILS.NATION = 'INDIA'
  GROUP BY SONG_ID
  ORDER BY STREAMS_IN_INDIA DESC
  FETCH FIRST 5 ROWS ONLY
) TABLE1,
SONG
WHERE SONG.SONG_ID = TABLE1.SONG_ID;

-- Users who haven't subscribed

SELECT * FROM USER_DETAILS
WHERE USER_ID NOT IN (SELECT USER_ID FROM USER_SUBSCRIPTION_PLAN);


-- CREATE A PERSONALIZED PLAYLIST FOR USER 115
 -- ACCORDING GENREHELISTENSMOST;

 FLOW--> FIND THE MOST PLAYED GENRE BY THE USER AND SUGGEST MORE
 SONG IN THE SAME GENRE;

SELECT SONG_NAME
FROM SONG
WHERE GENRE = (
  SELECT GENRE
  FROM PLAYED_HISTORY
  LEFT JOIN SONG ON PLAYED_HISTORY.SONG_ID = SONG.SONG_ID
  WHERE USER_ID = 115
  GROUP BY GENRE
  FETCH FIRST 1 ROWS ONLY
);

âž¯Which country contributes the highest number of
 users to our platform?

 SELECT NATION, COUNT(NATION) AS TOTAL_USERS
FROM USER_DETAILS
GROUP BY NATION;
